import espacoDeEstados.*;
import estrategiasDeBusca.heuristica.*;
import estrategiasDeBusca.cega.*;
import java.util.Arrays;
import java.util.List;

public class Main {

    @SuppressWarnings("rawtypes")
    public static void main(String[] args) {

        List<char[]> configsIniciais = Arrays.asList(
            new char[]{' ','2','3','1','4','6','7','5','8'},
            new char[]{'2','4','3','7','1','6','5',' ','8'},
            new char[]{'2','3',' ','7','4','1','5','8','6'}
            // new char[]{'7','2','3','4',' ','1','5','8','6'} // Deixando este comentado pois você marcou como OutOfMemory
        );

        char[] cfgFim = {'1','2','3','4','5','6','7',' ','8'};

        Puzzle8 puzzleFinal = new Puzzle8();
        puzzleFinal.setEstado( cfgFim );
        puzzleFinal.setCusto(0);
        puzzleFinal.setAvaliacao(0);

        List<Object> estrategias = Arrays.asList(
            new AStar(),
            new HillClimbing(),
            new BestFirst(),
            new BuscaEmLargura(),
            new BuscaEmProfundidade()
        );

        int contador = 1;

        for (char[] cfgIni : configsIniciais) {
            for (Object buscaObj : estrategias) {

                System.out.println("====================================================");
                System.out.println("Teste " + contador++ + ":");
                System.out.println("Configuração Inicial: " + new String(cfgIni));
                System.out.println("Estratégia de Busca: " + buscaObj.getClass().getSimpleName());
                System.out.println("----------------------------------------------------");

                Puzzle8 puzzleInicial = new Puzzle8();
                puzzleInicial.setEstado(cfgIni);
                puzzleInicial.setCusto(0);

                if (buscaObj instanceof BuscaInformada) {
                    BuscaInformada busca = (BuscaInformada) buscaObj;
                    busca.setInicio(puzzleInicial);
                    busca.setObjetivo(puzzleFinal);
                    busca.buscar();

                    System.out.println("Caminho Solução (Informada):");
                    for(Estado e : busca.getCaminhoSolucao()) {
                        System.out.println(e);
                    }

                } else if (buscaObj instanceof BuscaCega) {
                    BuscaCega busca = (BuscaCega) buscaObj;
                    busca.setInicio(puzzleInicial);
                    busca.setObjetivo(puzzleFinal);
                    busca.buscar();

                    System.out.println("Caminho Solução (Cega):");
                    for(Estado e : busca.getCaminhoSolucao()) {
                        System.out.println(e);
                    }
                }
                System.out.println("====================================================\n");
            }
        }

        System.exit(0);
    }
}
